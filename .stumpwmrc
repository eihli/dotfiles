(load-module "battery-portable")
(ql:quickload :slynk)
(mode-line)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Helpers
;;
;; Lazy streams.
;; Interesting and maybe worth a blog post later.
;; Pulled from SICP.

(defmacro delay (expr)
  `(lambda () ,expr))

(defun force (thunk)
  (if (functionp thunk)
      (funcall thunk)
      thunk))

(defmacro cons-stream (head tail)
  `(cons ,head (delay ,tail)))

(defun head (lazy-stream)
  (car lazy-stream))

(defun tail (lazy-stream)
  (force (cdr lazy-stream)))

(defun cycle (xs &optional cur)
  (cond ((eql cur nil) (cycle xs xs))
        (t (cons-stream (car cur) (cycle xs (cdr cur))))))

(defun range (&optional (start 0) end)
  (cond ((>= start (1- end)) (cons-stream start nil))
        (t (cons-stream start (range (1+ start) end)))))

;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; These are the things using "cycle".
;; Not necessary; it's a simple 2-value toggle.
;; But cycle seemed more generic and useful and fun
;; to write.

(let ((ow-keyboard-layout-toggle (cycle '("norman" ",us")))
      (ow-keyboard-layout ",us"))
  (defun ow-toggle-keyboard-layout ()
    (setf ow-keyboard-layout (head ow-keyboard-layout-toggle))
    (setf ow-keyboard-layout-toggle (tail ow-keyboard-layout-toggle)))
  (defcommand ow-toggle-keyboard () ()
              (ow-toggle-keyboard-layout)
              (run-shell-command (format nil "setxkbmap -variant ~a" ow-keyboard-layout))))

(let ((server-running nil))
  (defcommand slynk () ()
    "Toggle the slynk  server on/off"
    (if server-running
        (progn
          (slynk :stop-server 4006)
          (echo-string
           (current-screen)
           "Stopping slynk .")
          (setf server-running nil))
        (progn
          (slynk :create-server :port 4006
                               :style slynk :*communication-style*
                               :dont-close t)
          (echo-string
           (current-screen)
           "Starting slynk . M-x slime-connect RET RET, then (in-package stumpwm).")
          (setf server-running t)))))

(define-key *root-map* (kbd "C-z") "ow-toggle-keyboard")

(defcommand battery () ()
  (message
   (run-shell-command "acpi -b -a -t" t)))

(define-key *root-map* (kbd "C-v") "battery")

(setf *window-format* "%m%n%s%10c|%25t")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Application helpers

(defcommand rr-firefox () ()
            (run-or-raise "firefox" '(:class "firefox")))

(define-key *root-map* (kbd "C-f") "rr-firefox")
(define-key *root-map* (kbd "C-Tab") "fullscreen")
(define-key *top-map* (kbd "s-Tab") "fnext")
(define-key *top-map* (kbd "s-ISO_Left_Tab") "fprev")

(load-module "swm-gaps")

;; Head gaps run along the 4 borders of the monitor(s)
(setf swm-gaps:*head-gaps-size* 6)

;; Inner gaps run along all the 4 borders of a window
(setf swm-gaps:*inner-gaps-size* 4)

;; Outer gaps add more padding to the outermost borders of a window (touching
;; the screen border)
(setf swm-gaps:*outer-gaps-size* 8)

;; Call command
;; toggle-gaps
