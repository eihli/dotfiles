(ql:quickload :swank)
(load-module "battery-portable")

(defmacro delay (expr)
  `(lambda () ,expr))

(defun force (thunk) (funcall thunk))

(defmacro cons-stream (head tail)
  `(cons ,head (delay ,tail)))

(defun head (lazy-stream)
  (car lazy-stream))

(defun tail (lazy-stream)
  (force (cdr lazy-stream)))

(defun cycle (xs &optional cur)
  (cond ((eql cur nil) (cycle xs xs))
        (t (cons-stream (car cur) (cycle xs (cdr cur))))))

(defvar ow-keyboard-layout-toggle (cycle '("norman" ",us")))
(defvar *ow-keyboard-layout* ",us")

(defun ow-toggle-keyboard-layout ()
  (setf *ow-keyboard-layout* (head ow-keyboard-layout-toggle))
  (setf ow-keyboard-layout-toggle (tail ow-keyboard-layout-toggle)))

(defcommand ow-toggle-keyboard
    ()
    ()
  (ow-toggle-keyboard-layout)
  (run-shell-command (format nil "setxkbmap -variant ~a" *ow-keyboard-layout*)))

(let ((server-running nil))
  (defcommand swank () ()
    "Toggle the swank server on/off"
    (if server-running
	(progn
	  (swank:stop-server 4050)
	  (echo-string
	   (current-screen)
	   "Stopping swank.")
	  (setf server-running nil))
	(progn
	  (swank:create-server :port 4050
			       :style swank:*communication-style*
			       :dont-close t)
	  (echo-string
	   (current-screen)
	   "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm).")
	  (setf server-running t)))))

(define-key *root-map* (kbd "C-z") "ow-toggle-keyboard")

(defcommand battery () ()
  (message 
   (run-shell-command "acpi -b -a -t" t)))

(define-key *root-map* (kbd "C-v") "battery")

(setf *window-format* "%m%n%s%10c|%25t")
